<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SWTOAuth.Client.WP8</name>
    </assembly>
    <members>
        <member name="T:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn">
            <summary>
            This control is used to aquire a token from ACS using passive protocals between ACS and the Identity Provider.
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.#ctor">
            <summary>
            Initializes a new instance of the AccessControlServiceSignInControl class. 
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.GetSecurityToken(System.Uri)">
            <summary>
            Initiates an asynchronous request which prompts user to sign into an identity provider, from the list returned by the
            call to the discover service returns a security token via the RequestSecurityTokenResponseCompleted event handler. 
            </summary>
            
            <remarks>
            Initiates a token request from ACS following these steps:
            1) Get the list of configured Identity Providers from ACS by calling the discovery service
            2) Once the user selects their identity provider, navigate to the sign in page of the provider
            3) Using the WebBrowser control to complete the passive token request complete
            4) Get the token
            5) If a RequestSecurityTokenResponseStore is specified, set the token.
            6) return the token using the RequestSecurityTokenResponseCompleted callback
            </remarks>
            <param name="identityProviderDiscoveryService">The Identity provider discovery service from the ACS managment portal.</param>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.GetSecurityToken">
            <summary>
            Constructs the url for the protocol Javascriptnotify for direct handling of the JSON data
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.GoBack">
            <summary>
            Performs a backward navigation action, transitioning the control to a previous state. 
            <remarks>
            If the control is in a state that it cannot go backwards, no action is taken.
            </remarks>
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.RequestSecurityTokenResponseCompleted">
            <summary>
            Occurs when a security token that issued by ACS and ready to be presented to the application
            </summary>
        </member>
        <member name="P:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.CanGoBack">
            <summary>
            Gets whether there is at least one state that the control can navigate back from.
            <value>True if a least one state can be undone, or false otherwise.</value>
            </summary>
        </member>
        <member name="P:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.RequestSecurityTokenResponseStore">
            <summary>
            Gets and Sets the RequestSecurityTokenResponseStore which is used to store
            the RequestSecurityTokenResponse returned from ACS
            </summary>
        </member>
        <member name="P:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.Realm">
            <summary>
            Gets and Sets the Realm info
            </summary>
        </member>
        <member name="P:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.ServiceNamespace">
            <summary>
            Gets and sets the ACS tenant namespace which has been configured for this application
            </summary>
        </member>
        <member name="P:SWTOAuth.Client.WP8.Controls.AccessControlServiceSignIn.AcsHostUrl">
            <summary>
            Gets and sets the host URL of ACS
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.Controls.SignInPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore">
            <summary>
            Provides a class for storing a RequestSecurityTokenResponse to isolatedStorage
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore.#ctor">
            <summary>
            Initializes a new instance of the RequestSecurityTokenResponseStore class. 
            </summary>
        </member>
        <member name="M:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore.ContainsValidRequestSecurityTokenResponse">
            <summary>
            Checks if there is a valid RequestSecurityTokenResponse currrenlty in the store.
            </summary>
            <remarks>Returns true if there is a RequestSecurityTokenResponse in the store and it has not expired,
            otherwise retruns false</remarks>
        </member>
        <member name="P:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore.RequestSecurityTokenResponse">
            <summary>
            Gets or sets the configured RequestSecurityTokenResponse
            </summary>
            <remarks>Get returns null if no RequestSecurityTokenResponse has been configured. </remarks>
        </member>
        <member name="P:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore.SecurityToken">
            <summary>
            Gets or sets the security token from the configured RequestSecurityTokenResponse
            </summary>
            <remarks>Get returns null if no RequestSecurityTokenResponse has been configured. </remarks>
        </member>
        <member name="P:SWTOAuth.Client.WP8.RequestSecurityTokenResponseStore.IsTokenExpired">
            <summary>
            Gets whether the token has expired
            </summary>
        </member>
    </members>
</doc>
